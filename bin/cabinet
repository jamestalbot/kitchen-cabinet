#!/usr/bin/env ruby
# Encoding: utf-8

$LOAD_PATH.unshift(File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib')))

require 'optparse'
require 'kitchen-cabinet/cabinet'
require 'fileutils'

options = {}

opt_parser = OptionParser.new do |opt|
  opt.banner = 'Usage: cabinet [options] <cookbook name>'
  opt.separator  ''
  opt.separator  'Options'
  opt.on('-o', '--cookbook-path PATH', 'The directory where the cookbook will be created') do |path|
    options[:path] = path
  end
  opt.on('-C', '--copyright COPYRIGHT_HOLDER', 'The  name  of  the  copyright holder.') do |copyright|
    options[:copyright] = copyright
  end
  opt.on('-I', '--license LICENSE', 'The type of license under which a cookbook is distributed: apachev2, gplv2, gplv3, mit, or none (default).') do |license|
    options[:license] = license
  end
  opt.on('-m', '--email EMAIL', 'The  email  address  for the individual who maintains the cookbook.') do |email|
    options[:email] = email
  end
  opt.on('-u', '--update', "Update the Gemfile, Chefignore, Guardfile (and other config files that don't change much) of an existing project") do
    options[:update] = true
  end
  opt.on('-h', '--help', 'help') do
    options[:help] = true
    puts opt_parser
    exit
  end
end

opt_parser.parse!

if ARGV.empty?
  puts opt_parser
  exit
end

cookbook_name = ARGV.pop

def opt_error(message, opt_parser)
  puts ''
  puts message
  puts ''
  puts opt_parser
  exit
end

if options[:path].respond_to?(:to_str)
  path = File.join(options[:path], cookbook_name)
else
  puts opt_error('Specify a path!', opt_parser)
end

if options[:update]
  opt_error("You need to create #{cookbook_name} first!") unless File.exists?(path)
  unless options[:path].respond_to?(:to_str) && (cookbook_name.is_a? String)
    opt_error('Make sure you specify -o and a cookbook name!', opt_parser)
  end
  if cookbook_name
    puts "Updating #{cookbook_name}..."
    puts 'Gemfile, Chefignore, and Guardfile are up to date.'
    Cabinet.update_cookbook(cookbook_name, options, path)
    exit
  else
    opt_error('Define a path with `-o` and a cookbook name!', opt_parser)
  end
elsif cookbook_name
  Cabinet.init(cookbook_name, options, path)
  puts "Cookbook #{cookbook_name} created successfully"
  puts 'Next steps...'
  puts "  $ cd #{File.join(options[:path], cookbook_name)}"
  puts '  $ bundle install'
  puts '  $ bundle exec berks install'
  puts '  $ bundle exec strainer test'
  exit
end
